
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002cac  08002cac  00003cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002e60  08002e60  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e60  08002e60  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002e68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000014  08002e7c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002e7c  000040ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcfb  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad3  00000000  00000000  0000fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00011818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a68  00000000  00000000  00012588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025866  00000000  00000000  00012ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de98  00000000  00000000  00038856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb5cd  00000000  00000000  000466ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131cbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003874  00000000  00000000  00131d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00135574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c94 	.word	0x08002c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002c94 	.word	0x08002c94

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd68 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f836 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ec 	bl	80003b0 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001d8:	f000 f8c2 	bl	8000360 <MX_TIM16_Init>
  MX_SPI1_Init();
 80001dc:	f000 f882 	bl	80002e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GLCD_init(); // initialize the screen
 80001e0:	f000 fa3c 	bl	800065c <GLCD_init>
  GLCD_clear(); // clear the screen
 80001e4:	f000 fa80 	bl	80006e8 <GLCD_clear>
  HAL_TIM_Base_Start_IT(&htim16); // Start Timer 16
 80001e8:	4812      	ldr	r0, [pc, #72]	@ (8000234 <main+0x6c>)
 80001ea:	f002 fac3 	bl	8002774 <HAL_TIM_Base_Start_IT>

  	HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2101      	movs	r1, #1
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f6:	f001 f8a3 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2102      	movs	r1, #2
 80001fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000202:	f001 f89d 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2101      	movs	r1, #1
 800020a:	480b      	ldr	r0, [pc, #44]	@ (8000238 <main+0x70>)
 800020c:	f001 f898 	bl	8001340 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2102      	movs	r1, #2
 8000214:	4809      	ldr	r0, [pc, #36]	@ (800023c <main+0x74>)
 8000216:	f001 f893 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2101      	movs	r1, #1
 800021e:	4807      	ldr	r0, [pc, #28]	@ (800023c <main+0x74>)
 8000220:	f001 f88e 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2110      	movs	r1, #16
 8000228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022c:	f001 f888 	bl	8001340 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000230:	bf00      	nop
 8000232:	e7fd      	b.n	8000230 <main+0x68>
 8000234:	20000094 	.word	0x20000094
 8000238:	48000400 	.word	0x48000400
 800023c:	48000800 	.word	0x48000800

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	@ 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	@ 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fcf4 	bl	8002c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000262:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000266:	f001 f891 	bl	800138c <HAL_PWREx_ControlVoltageScaling>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000270:	f000 fc0e 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800027c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027e:	2310      	movs	r3, #16
 8000280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000282:	2302      	movs	r3, #2
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800028e:	230a      	movs	r3, #10
 8000290:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000292:	2307      	movs	r3, #7
 8000294:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f8c8 	bl	8001438 <HAL_RCC_OscConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ae:	f000 fbef 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	230f      	movs	r3, #15
 80002b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b6:	2303      	movs	r3, #3
 80002b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	2104      	movs	r1, #4
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fc90 	bl	8001bf0 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002d6:	f000 fbdb 	bl	8000a90 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3758      	adds	r7, #88	@ 0x58
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_SPI1_Init+0x74>)
 80002ea:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <MX_SPI1_Init+0x78>)
 80002ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_SPI1_Init+0x74>)
 80002f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_SPI1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <MX_SPI1_Init+0x74>)
 80002fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000302:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <MX_SPI1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000316:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <MX_SPI1_Init+0x74>)
 800031a:	2220      	movs	r2, #32
 800031c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_SPI1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000332:	2207      	movs	r2, #7
 8000334:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_SPI1_Init+0x74>)
 800033e:	2208      	movs	r2, #8
 8000340:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_SPI1_Init+0x74>)
 8000344:	f001 fe40 	bl	8001fc8 <HAL_SPI_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800034e:	f000 fb9f 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000030 	.word	0x20000030
 800035c:	40013000 	.word	0x40013000

08000360 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <MX_TIM16_Init+0x48>)
 8000366:	4a11      	ldr	r2, [pc, #68]	@ (80003ac <MX_TIM16_Init+0x4c>)
 8000368:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_TIM16_Init+0x48>)
 800036c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000370:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000372:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <MX_TIM16_Init+0x48>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000378:	4b0b      	ldr	r3, [pc, #44]	@ (80003a8 <MX_TIM16_Init+0x48>)
 800037a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800037e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <MX_TIM16_Init+0x48>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <MX_TIM16_Init+0x48>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_TIM16_Init+0x48>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MX_TIM16_Init+0x48>)
 8000394:	f002 f996 	bl	80026c4 <HAL_TIM_Base_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800039e:	f000 fb77 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000094 	.word	0x20000094
 80003ac:	40014400 	.word	0x40014400

080003b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	@ 0x28
 80003b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c6:	4b3f      	ldr	r3, [pc, #252]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a3e      	ldr	r2, [pc, #248]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4b3c      	ldr	r3, [pc, #240]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003de:	4b39      	ldr	r3, [pc, #228]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a38      	ldr	r2, [pc, #224]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4b36      	ldr	r3, [pc, #216]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f6:	4b33      	ldr	r3, [pc, #204]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003fa:	4a32      	ldr	r2, [pc, #200]	@ (80004c4 <MX_GPIO_Init+0x114>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000402:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <MX_GPIO_Init+0x114>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <MX_GPIO_Init+0x114>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a2c      	ldr	r2, [pc, #176]	@ (80004c4 <MX_GPIO_Init+0x114>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b2a      	ldr	r3, [pc, #168]	@ (80004c4 <MX_GPIO_Init+0x114>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, YellowS_Pin|GreenS_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2183      	movs	r1, #131	@ 0x83
 800042a:	4827      	ldr	r0, [pc, #156]	@ (80004c8 <MX_GPIO_Init+0x118>)
 800042c:	f000 ff88 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GreenM_Pin|YellowM_Pin|RedS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f240 2113 	movw	r1, #531	@ 0x213
 8000436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043a:	f000 ff81 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RedM_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2141      	movs	r1, #65	@ 0x41
 8000442:	4822      	ldr	r0, [pc, #136]	@ (80004cc <MX_GPIO_Init+0x11c>)
 8000444:	f000 ff7c 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YellowS_Pin GreenS_Pin PC7 */
  GPIO_InitStruct.Pin = YellowS_Pin|GreenS_Pin|GPIO_PIN_7;
 8000448:	2383      	movs	r3, #131	@ 0x83
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4619      	mov	r1, r3
 800045e:	481a      	ldr	r0, [pc, #104]	@ (80004c8 <MX_GPIO_Init+0x118>)
 8000460:	f000 fdac 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenM_Pin YellowM_Pin RedS_Pin PA9 */
  GPIO_InitStruct.Pin = GreenM_Pin|YellowM_Pin|RedS_Pin|GPIO_PIN_9;
 8000464:	f240 2313 	movw	r3, #531	@ 0x213
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0314 	add.w	r3, r7, #20
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000480:	f000 fd9c 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RedM_Pin PB6 */
  GPIO_InitStruct.Pin = RedM_Pin|GPIO_PIN_6;
 8000484:	2341      	movs	r3, #65	@ 0x41
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	480c      	ldr	r0, [pc, #48]	@ (80004cc <MX_GPIO_Init+0x11c>)
 800049c:	f000 fd8e 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : plate_Pin */
  GPIO_InitStruct.Pin = plate_Pin;
 80004a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(plate_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	4619      	mov	r1, r3
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b8:	f000 fd80 	bl	8000fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004bc:	bf00      	nop
 80004be:	3728      	adds	r7, #40	@ 0x28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000400 	.word	0x48000400

080004d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a38      	ldr	r2, [pc, #224]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0xec>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d137      	bne.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x80>
		if (time > 5 & HAL_GPIO_ReadPin(GPIOA, plate_Pin) == 0){
 80004e0:	4b37      	ldr	r3, [pc, #220]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b05      	cmp	r3, #5
 80004e6:	bfcc      	ite	gt
 80004e8:	2301      	movgt	r3, #1
 80004ea:	2300      	movle	r3, #0
 80004ec:	b2dc      	uxtb	r4, r3
 80004ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f6:	f000 ff0b 	bl	8001310 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf0c      	ite	eq
 8000500:	2301      	moveq	r3, #1
 8000502:	2300      	movne	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4023      	ands	r3, r4
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d005      	beq.n	800051a <HAL_TIM_PeriodElapsedCallback+0x4a>
			time = 0;
 800050e:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
			change = 1;
 8000514:	4b2b      	ldr	r3, [pc, #172]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
		}
		if (time > 21 & change == 1){
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b15      	cmp	r3, #21
 8000520:	bfcc      	ite	gt
 8000522:	2301      	movgt	r3, #1
 8000524:	2300      	movle	r3, #0
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	bf0c      	ite	eq
 8000530:	2301      	moveq	r3, #1
 8000532:	2300      	movne	r3, #0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4013      	ands	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d008      	beq.n	8000550 <HAL_TIM_PeriodElapsedCallback+0x80>
			time = 0;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
			change = 0;
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
			StopLightState(0);
 800054a:	2000      	movs	r0, #0
 800054c:	f000 f98a 	bl	8000864 <StopLightState>
		}
	}
	if (change == 1){
 8000550:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d128      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xda>
		StopLightState(time);
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f980 	bl	8000864 <StopLightState>

		GLCD_writeNumberLeft(ten);
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f8f7 	bl	800075c <GLCD_writeNumberLeft>
		GLCD_writeNumberRight(one);
 800056e:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f934 	bl	80007e0 <GLCD_writeNumberRight>
		if (ten == 0 & one == 0){
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4313      	orrs	r3, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	d011      	beq.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else if (one == 0){
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d108      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0xd0>
			  ten = ten -1;
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a0c      	ldr	r2, [pc, #48]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000596:	6013      	str	r3, [r2, #0]
			  one = 9;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800059a:	2209      	movs	r2, #9
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	e004      	b.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xda>
		}
		else {
			  one = one - 1;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80005a8:	6013      	str	r3, [r2, #0]
		}
	}
	time = time + 1;
 80005aa:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd90      	pop	{r4, r7, pc}
 80005bc:	20000094 	.word	0x20000094
 80005c0:	200000e0 	.word	0x200000e0
 80005c4:	200000e4 	.word	0x200000e4
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000004 	.word	0x20000004

080005d0 <SPI_write>:

void SPI_write(unsigned char data){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	@ 0x40
 80005de:	4809      	ldr	r0, [pc, #36]	@ (8000604 <SPI_write+0x34>)
 80005e0:	f000 feae 	bl	8001340 <HAL_GPIO_WritePin>

	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 80005e4:	1df9      	adds	r1, r7, #7
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <SPI_write+0x38>)
 80005ee:	f001 fd8e 	bl	800210e <HAL_SPI_Transmit>

	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2140      	movs	r1, #64	@ 0x40
 80005f6:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SPI_write+0x34>)
 80005f8:	f000 fea2 	bl	8001340 <HAL_GPIO_WritePin>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	48000400 	.word	0x48000400
 8000608:	20000030 	.word	0x20000030

0800060c <GLCD_data_write>:

void GLCD_data_write(unsigned char data){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]

	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <GLCD_data_write+0x24>)
 800061c:	f000 fe90 	bl	8001340 <HAL_GPIO_WritePin>

	// Send data over SPI
	SPI_write(data);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffd4 	bl	80005d0 <SPI_write>

}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000800 	.word	0x48000800

08000634 <GLCD_command_write>:

void GLCD_command_write(unsigned char data){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <GLCD_command_write+0x24>)
 8000644:	f000 fe7c 	bl	8001340 <HAL_GPIO_WritePin>

	// Send data over SPI
	SPI_write(data);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffc0 	bl	80005d0 <SPI_write>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000800 	.word	0x48000800

0800065c <GLCD_init>:

void GLCD_init(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2140      	movs	r1, #64	@ 0x40
 8000664:	4812      	ldr	r0, [pc, #72]	@ (80006b0 <GLCD_init+0x54>)
 8000666:	f000 fe6b 	bl	8001340 <HAL_GPIO_WritePin>

	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f000 fe64 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000682:	f000 fe5d 	bl	8001340 <HAL_GPIO_WritePin>

	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 8000686:	2021      	movs	r0, #33	@ 0x21
 8000688:	f7ff ffd4 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0xA0); // set LCD Vop for contrast (this may be adjusted)
 800068c:	20a0      	movs	r0, #160	@ 0xa0
 800068e:	f7ff ffd1 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 8000692:	2004      	movs	r0, #4
 8000694:	f7ff ffce 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0x11); // set LCD bias mode (this may be adjusted)
 8000698:	2011      	movs	r0, #17
 800069a:	f7ff ffcb 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 800069e:	2020      	movs	r0, #32
 80006a0:	f7ff ffc8 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode normal
 80006a4:	200c      	movs	r0, #12
 80006a6:	f7ff ffc5 	bl	8000634 <GLCD_command_write>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	48000400 	.word	0x48000400

080006b4 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]

	GLCD_command_write(0x80 | x); // column
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffb1 	bl	8000634 <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ffaa 	bl	8000634 <GLCD_command_write>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <GLCD_clear>:

void GLCD_clear(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e005      	b.n	8000700 <GLCD_clear+0x18>
		GLCD_data_write(0x00); // write zeros
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ff89 	bl	800060c <GLCD_data_write>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++){
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000706:	dbf5      	blt.n	80006f4 <GLCD_clear+0xc>
	}
	GLCD_setCursor(0,0); // return cursor to top left
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ffd2 	bl	80006b4 <GLCD_setCursor>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <GLCD_putblock>:

void GLCD_putblock(int font_table_row){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	int i;
	for (i=0; i<6; i++){
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e00f      	b.n	8000746 <GLCD_putblock+0x2e>
		GLCD_data_write(font_table_other[font_table_row][i]);
 8000726:	490c      	ldr	r1, [pc, #48]	@ (8000758 <GLCD_putblock+0x40>)
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	18ca      	adds	r2, r1, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff66 	bl	800060c <GLCD_data_write>
	for (i=0; i<6; i++){
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b05      	cmp	r3, #5
 800074a:	ddec      	ble.n	8000726 <GLCD_putblock+0xe>
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	08002cac 	.word	0x08002cac

0800075c <GLCD_writeNumberLeft>:

void GLCD_writeNumberLeft(int num){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	int i;
	int i2;

	for (i=0; i<6; i++){
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e02f      	b.n	80007ca <GLCD_writeNumberLeft+0x6e>
		GLCD_setCursor(0,(9*i));
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	00d2      	lsls	r2, r2, #3
 8000772:	4413      	add	r3, r2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff9b 	bl	80006b4 <GLCD_setCursor>
		for (i2=0; i2<6; i2++){
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	e01c      	b.n	80007be <GLCD_writeNumberLeft+0x62>

			if ((numbers[num][i][i2]) == 1){
 8000784:	4815      	ldr	r0, [pc, #84]	@ (80007dc <GLCD_writeNumberLeft+0x80>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	461a      	mov	r2, r3
 800078c:	0052      	lsls	r2, r2, #1
 800078e:	441a      	add	r2, r3
 8000790:	0053      	lsls	r3, r2, #1
 8000792:	461a      	mov	r2, r3
 8000794:	460b      	mov	r3, r1
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	440b      	add	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	18c2      	adds	r2, r0, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d103      	bne.n	80007b2 <GLCD_writeNumberLeft+0x56>
				GLCD_putblock(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ffb4 	bl	8000718 <GLCD_putblock>
 80007b0:	e002      	b.n	80007b8 <GLCD_writeNumberLeft+0x5c>
			}
			else {
				GLCD_putblock(0);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ffb0 	bl	8000718 <GLCD_putblock>
		for (i2=0; i2<6; i2++){
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	2b05      	cmp	r3, #5
 80007c2:	dddf      	ble.n	8000784 <GLCD_writeNumberLeft+0x28>
	for (i=0; i<6; i++){
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	2b05      	cmp	r3, #5
 80007ce:	ddcc      	ble.n	800076a <GLCD_writeNumberLeft+0xe>
			}
		}
	}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08002cb8 	.word	0x08002cb8

080007e0 <GLCD_writeNumberRight>:

void GLCD_writeNumberRight(int num){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	int i;
	int i2;

	for (i=0; i<6; i++){
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e02f      	b.n	800084e <GLCD_writeNumberRight+0x6e>
		GLCD_setCursor(36,(9*i));
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	00d2      	lsls	r2, r2, #3
 80007f6:	4413      	add	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	2024      	movs	r0, #36	@ 0x24
 80007fe:	f7ff ff59 	bl	80006b4 <GLCD_setCursor>
		for (i2=0; i2<6; i2++){
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	e01c      	b.n	8000842 <GLCD_writeNumberRight+0x62>

			if ((numbers[num][i][i2]) == 1){
 8000808:	4815      	ldr	r0, [pc, #84]	@ (8000860 <GLCD_writeNumberRight+0x80>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	461a      	mov	r2, r3
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	441a      	add	r2, r3
 8000814:	0053      	lsls	r3, r2, #1
 8000816:	461a      	mov	r2, r3
 8000818:	460b      	mov	r3, r1
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	18c2      	adds	r2, r0, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d103      	bne.n	8000836 <GLCD_writeNumberRight+0x56>
				GLCD_putblock(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff72 	bl	8000718 <GLCD_putblock>
 8000834:	e002      	b.n	800083c <GLCD_writeNumberRight+0x5c>
			}
			else {
				GLCD_putblock(0);
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff ff6e 	bl	8000718 <GLCD_putblock>
		for (i2=0; i2<6; i2++){
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b05      	cmp	r3, #5
 8000846:	dddf      	ble.n	8000808 <GLCD_writeNumberRight+0x28>
	for (i=0; i<6; i++){
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b05      	cmp	r3, #5
 8000852:	ddcc      	ble.n	80007ee <GLCD_writeNumberRight+0xe>
			}
		}
	}
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08002cb8 	.word	0x08002cb8

08000864 <StopLightState>:

void StopLightState(char time){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	switch (time){
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b15      	cmp	r3, #21
 8000872:	f200 8101 	bhi.w	8000a78 <StopLightState+0x214>
 8000876:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <StopLightState+0x18>)
 8000878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087c:	080008d5 	.word	0x080008d5
 8000880:	08000a79 	.word	0x08000a79
 8000884:	08000a79 	.word	0x08000a79
 8000888:	08000a79 	.word	0x08000a79
 800088c:	08000a79 	.word	0x08000a79
 8000890:	08000a79 	.word	0x08000a79
 8000894:	08000a79 	.word	0x08000a79
 8000898:	08000925 	.word	0x08000925
 800089c:	08000a79 	.word	0x08000a79
 80008a0:	08000a79 	.word	0x08000a79
 80008a4:	08000969 	.word	0x08000969
 80008a8:	080009ad 	.word	0x080009ad
 80008ac:	08000a79 	.word	0x08000a79
 80008b0:	08000a79 	.word	0x08000a79
 80008b4:	08000a79 	.word	0x08000a79
 80008b8:	08000a79 	.word	0x08000a79
 80008bc:	08000a79 	.word	0x08000a79
 80008c0:	08000a79 	.word	0x08000a79
 80008c4:	080009f1 	.word	0x080009f1
 80008c8:	08000a79 	.word	0x08000a79
 80008cc:	08000a79 	.word	0x08000a79
 80008d0:	08000a35 	.word	0x08000a35

	case 0x0:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008dc:	f000 fd30 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2102      	movs	r1, #2
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e8:	f000 fd2a 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2101      	movs	r1, #1
 80008f0:	4863      	ldr	r0, [pc, #396]	@ (8000a80 <StopLightState+0x21c>)
 80008f2:	f000 fd25 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	4862      	ldr	r0, [pc, #392]	@ (8000a84 <StopLightState+0x220>)
 80008fc:	f000 fd20 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	485f      	ldr	r0, [pc, #380]	@ (8000a84 <StopLightState+0x220>)
 8000906:	f000 fd1b 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2110      	movs	r1, #16
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f000 fd15 	bl	8001340 <HAL_GPIO_WritePin>
		ten = 1;
 8000916:	4b5c      	ldr	r3, [pc, #368]	@ (8000a88 <StopLightState+0x224>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
		one = 1;
 800091c:	4b5b      	ldr	r3, [pc, #364]	@ (8000a8c <StopLightState+0x228>)
 800091e:	2201      	movs	r2, #1
 8000920:	601a      	str	r2, [r3, #0]
		break;
 8000922:	e0a9      	b.n	8000a78 <StopLightState+0x214>
	case 0x7:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092c:	f000 fd08 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2102      	movs	r1, #2
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fd02 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2101      	movs	r1, #1
 8000940:	484f      	ldr	r0, [pc, #316]	@ (8000a80 <StopLightState+0x21c>)
 8000942:	f000 fcfd 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2102      	movs	r1, #2
 800094a:	484e      	ldr	r0, [pc, #312]	@ (8000a84 <StopLightState+0x220>)
 800094c:	f000 fcf8 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2101      	movs	r1, #1
 8000954:	484b      	ldr	r0, [pc, #300]	@ (8000a84 <StopLightState+0x220>)
 8000956:	f000 fcf3 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2110      	movs	r1, #16
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f000 fced 	bl	8001340 <HAL_GPIO_WritePin>
		break;
 8000966:	e087      	b.n	8000a78 <StopLightState+0x214>
	case 0x0A:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fce6 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 fce0 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2101      	movs	r1, #1
 8000984:	483e      	ldr	r0, [pc, #248]	@ (8000a80 <StopLightState+0x21c>)
 8000986:	f000 fcdb 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2102      	movs	r1, #2
 800098e:	483d      	ldr	r0, [pc, #244]	@ (8000a84 <StopLightState+0x220>)
 8000990:	f000 fcd6 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2101      	movs	r1, #1
 8000998:	483a      	ldr	r0, [pc, #232]	@ (8000a84 <StopLightState+0x220>)
 800099a:	f000 fcd1 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a6:	f000 fccb 	bl	8001340 <HAL_GPIO_WritePin>
		break;
 80009aa:	e065      	b.n	8000a78 <StopLightState+0x214>
	case 0x0B:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b4:	f000 fcc4 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f000 fcbe 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	482d      	ldr	r0, [pc, #180]	@ (8000a80 <StopLightState+0x21c>)
 80009ca:	f000 fcb9 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2102      	movs	r1, #2
 80009d2:	482c      	ldr	r0, [pc, #176]	@ (8000a84 <StopLightState+0x220>)
 80009d4:	f000 fcb4 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2101      	movs	r1, #1
 80009dc:	4829      	ldr	r0, [pc, #164]	@ (8000a84 <StopLightState+0x220>)
 80009de:	f000 fcaf 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2110      	movs	r1, #16
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ea:	f000 fca9 	bl	8001340 <HAL_GPIO_WritePin>
		break;
 80009ee:	e043      	b.n	8000a78 <StopLightState+0x214>
	case 0x12:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 fca2 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f000 fc9c 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	481c      	ldr	r0, [pc, #112]	@ (8000a80 <StopLightState+0x21c>)
 8000a0e:	f000 fc97 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2102      	movs	r1, #2
 8000a16:	481b      	ldr	r0, [pc, #108]	@ (8000a84 <StopLightState+0x220>)
 8000a18:	f000 fc92 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <StopLightState+0x220>)
 8000a22:	f000 fc8d 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2110      	movs	r1, #16
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 fc87 	bl	8001340 <HAL_GPIO_WritePin>
		break;
 8000a32:	e021      	b.n	8000a78 <StopLightState+0x214>
	case 0x15:
		HAL_GPIO_WritePin(GreenM_GPIO_Port, GreenM_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2101      	movs	r1, #1
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f000 fc80 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowM_GPIO_Port, YellowM_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a48:	f000 fc7a 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedM_GPIO_Port, RedM_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2101      	movs	r1, #1
 8000a50:	480b      	ldr	r0, [pc, #44]	@ (8000a80 <StopLightState+0x21c>)
 8000a52:	f000 fc75 	bl	8001340 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GreenS_GPIO_Port, GreenS_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <StopLightState+0x220>)
 8000a5c:	f000 fc70 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YellowS_GPIO_Port, YellowS_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <StopLightState+0x220>)
 8000a66:	f000 fc6b 	bl	8001340 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RedS_GPIO_Port, RedS_Pin, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f000 fc65 	bl	8001340 <HAL_GPIO_WritePin>
		break;
 8000a76:	bf00      	nop


}
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	48000400 	.word	0x48000400
 8000a84:	48000800 	.word	0x48000800
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <HAL_SPI_MspInit+0x7c>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d128      	bne.n	8000b58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0a:	4a16      	ldr	r2, [pc, #88]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_SPI_MspInit+0x80>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b36:	23a0      	movs	r3, #160	@ 0xa0
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b54:	f000 fa32 	bl	8000fbc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013000 	.word	0x40013000
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <HAL_TIM_Base_MspInit+0x44>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d113      	bne.n	8000ba2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x48>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x48>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_TIM_Base_MspInit+0x48>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2019      	movs	r0, #25
 8000b98:	f000 f9d9 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f000 f9f2 	bl	8000f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40014400 	.word	0x40014400
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <NMI_Handler+0x4>

08000bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f8a5 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c1a:	f001 fe1b 	bl	8002854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000094 	.word	0x20000094

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f001 ffe7 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff faa3 	bl	80001c8 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c90:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8000c94:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c98:	200000ec 	.word	0x200000ec

08000c9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_2_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_Init+0x3c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_Init+0x3c>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f93e 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f80f 	bl	8000ce0 <HAL_InitTick>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e001      	b.n	8000cd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cce:	f7ff fee5 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d023      	beq.n	8000d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b16      	ldr	r3, [pc, #88]	@ (8000d50 <HAL_InitTick+0x70>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f949 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10f      	bne.n	8000d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d809      	bhi.n	8000d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f913 	bl	8000f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_InitTick+0x74>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e007      	b.n	8000d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	73fb      	strb	r3, [r7, #15]
 8000d3a:	e001      	b.n	8000d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	20000008 	.word	0x20000008
 8000d54:	2000000c 	.word	0x2000000c

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000010 	.word	0x20000010
 8000d7c:	200000e8 	.word	0x200000e8

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000e8 	.word	0x200000e8

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	@ (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	@ (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	@ (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	@ 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff3e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff31 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e17f      	b.n	80012cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8171 	beq.w	80012c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d005      	beq.n	8000ffc <HAL_GPIO_Init+0x40>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d130      	bne.n	800105e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001032:	2201      	movs	r2, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	f003 0201 	and.w	r2, r3, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b03      	cmp	r3, #3
 8001068:	d118      	bne.n	800109c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	08db      	lsrs	r3, r3, #3
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	6939      	ldr	r1, [r7, #16]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80ac 	beq.w	80012c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b5f      	ldr	r3, [pc, #380]	@ (80012ec <HAL_GPIO_Init+0x330>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	4a5e      	ldr	r2, [pc, #376]	@ (80012ec <HAL_GPIO_Init+0x330>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6613      	str	r3, [r2, #96]	@ 0x60
 800117a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <HAL_GPIO_Init+0x330>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001186:	4a5a      	ldr	r2, [pc, #360]	@ (80012f0 <HAL_GPIO_Init+0x334>)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011b0:	d025      	beq.n	80011fe <HAL_GPIO_Init+0x242>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	@ (80012f4 <HAL_GPIO_Init+0x338>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01f      	beq.n	80011fa <HAL_GPIO_Init+0x23e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_GPIO_Init+0x33c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_GPIO_Init+0x23a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	@ (80012fc <HAL_GPIO_Init+0x340>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x236>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001300 <HAL_GPIO_Init+0x344>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x232>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001304 <HAL_GPIO_Init+0x348>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x22e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001308 <HAL_GPIO_Init+0x34c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x22a>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x244>
 80011fe:	2300      	movs	r3, #0
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001210:	4937      	ldr	r1, [pc, #220]	@ (80012f0 <HAL_GPIO_Init+0x334>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121e:	4b3b      	ldr	r3, [pc, #236]	@ (800130c <HAL_GPIO_Init+0x350>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001242:	4a32      	ldr	r2, [pc, #200]	@ (800130c <HAL_GPIO_Init+0x350>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <HAL_GPIO_Init+0x350>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126c:	4a27      	ldr	r2, [pc, #156]	@ (800130c <HAL_GPIO_Init+0x350>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <HAL_GPIO_Init+0x350>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001296:	4a1d      	ldr	r2, [pc, #116]	@ (800130c <HAL_GPIO_Init+0x350>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_GPIO_Init+0x350>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <HAL_GPIO_Init+0x350>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f47f ae78 	bne.w	8000fcc <HAL_GPIO_Init+0x10>
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00
 8001300:	48001000 	.word	0x48001000
 8001304:	48001400 	.word	0x48001400
 8001308:	48001800 	.word	0x48001800
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800135c:	e002      	b.n	8001364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <HAL_PWREx_GetVoltageRange+0x18>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800139a:	d130      	bne.n	80013fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013a8:	d038      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013b2:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2232      	movs	r2, #50	@ 0x32
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9b      	lsrs	r3, r3, #18
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d0:	e002      	b.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e4:	d102      	bne.n	80013ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f2      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f8:	d110      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e00f      	b.n	800141e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800140a:	d007      	beq.n	800141c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001414:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40007000 	.word	0x40007000
 8001430:	20000008 	.word	0x20000008
 8001434:	431bde83 	.word	0x431bde83

08001438 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e3ca      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144a:	4b97      	ldr	r3, [pc, #604]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001454:	4b94      	ldr	r3, [pc, #592]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80e4 	beq.w	8001634 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_RCC_OscConfig+0x4a>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b0c      	cmp	r3, #12
 8001476:	f040 808b 	bne.w	8001590 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b01      	cmp	r3, #1
 800147e:	f040 8087 	bne.w	8001590 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001482:	4b89      	ldr	r3, [pc, #548]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x62>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e3a2      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	4b82      	ldr	r3, [pc, #520]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <HAL_RCC_OscConfig+0x7c>
 80014aa:	4b7f      	ldr	r3, [pc, #508]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b2:	e005      	b.n	80014c0 <HAL_RCC_OscConfig+0x88>
 80014b4:	4b7c      	ldr	r3, [pc, #496]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d223      	bcs.n	800150c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd1d 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e383      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b73      	ldr	r3, [pc, #460]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a72      	ldr	r2, [pc, #456]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b70      	ldr	r3, [pc, #448]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	496d      	ldr	r1, [pc, #436]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b6c      	ldr	r3, [pc, #432]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	4968      	ldr	r1, [pc, #416]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e025      	b.n	8001558 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150c:	4b66      	ldr	r3, [pc, #408]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a65      	ldr	r2, [pc, #404]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b63      	ldr	r3, [pc, #396]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4960      	ldr	r1, [pc, #384]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b5f      	ldr	r3, [pc, #380]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	495b      	ldr	r1, [pc, #364]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d109      	bne.n	8001558 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fcdd 	bl	8001f08 <RCC_SetFlashLatencyFromMSIRange>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e343      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001558:	f000 fc4a 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 800155c:	4602      	mov	r2, r0
 800155e:	4b52      	ldr	r3, [pc, #328]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	4950      	ldr	r1, [pc, #320]	@ (80016ac <HAL_RCC_OscConfig+0x274>)
 800156a:	5ccb      	ldrb	r3, [r1, r3]
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <HAL_RCC_OscConfig+0x278>)
 8001576:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001578:	4b4e      	ldr	r3, [pc, #312]	@ (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fbaf 	bl	8000ce0 <HAL_InitTick>
 8001582:	4603      	mov	r3, r0
 8001584:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d052      	beq.n	8001632 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	e327      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d032      	beq.n	80015fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001598:	4b43      	ldr	r3, [pc, #268]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a42      	ldr	r2, [pc, #264]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbec 	bl	8000d80 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbe8 	bl	8000d80 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e310      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015be:	4b3a      	ldr	r3, [pc, #232]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b37      	ldr	r3, [pc, #220]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a36      	ldr	r2, [pc, #216]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4931      	ldr	r1, [pc, #196]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	492c      	ldr	r1, [pc, #176]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e01a      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fe:	4b2a      	ldr	r3, [pc, #168]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a29      	ldr	r2, [pc, #164]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160a:	f7ff fbb9 	bl	8000d80 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001612:	f7ff fbb5 	bl	8000d80 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e2dd      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x1da>
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d074      	beq.n	800172a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x21a>
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d10e      	bne.n	800166a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d10b      	bne.n	800166a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d064      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f0>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d160      	bne.n	8001728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e2ba      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x24a>
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800167a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e026      	b.n	80016d0 <HAL_RCC_OscConfig+0x298>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800168a:	d115      	bne.n	80016b8 <HAL_RCC_OscConfig+0x280>
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a05      	ldr	r2, [pc, #20]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 8001692:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a02      	ldr	r2, [pc, #8]	@ (80016a8 <HAL_RCC_OscConfig+0x270>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e014      	b.n	80016d0 <HAL_RCC_OscConfig+0x298>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08002e20 	.word	0x08002e20
 80016b0:	20000008 	.word	0x20000008
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	4ba0      	ldr	r3, [pc, #640]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a9f      	ldr	r2, [pc, #636]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b9d      	ldr	r3, [pc, #628]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a9c      	ldr	r2, [pc, #624]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb52 	bl	8000d80 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb4e 	bl	8000d80 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e276      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f2:	4b92      	ldr	r3, [pc, #584]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x2a8>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fb3e 	bl	8000d80 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fb3a 	bl	8000d80 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e262      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	4b88      	ldr	r3, [pc, #544]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d0>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d060      	beq.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x310>
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d119      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d116      	bne.n	8001776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001748:	4b7c      	ldr	r3, [pc, #496]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x328>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e23f      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b76      	ldr	r3, [pc, #472]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	4973      	ldr	r1, [pc, #460]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001774:	e040      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b6f      	ldr	r3, [pc, #444]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff faf9 	bl	8000d80 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff faf5 	bl	8000d80 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e21d      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a4:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b62      	ldr	r3, [pc, #392]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	495f      	ldr	r1, [pc, #380]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b5d      	ldr	r3, [pc, #372]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a5c      	ldr	r2, [pc, #368]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fad5 	bl	8000d80 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fad1 	bl	8000d80 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1f9      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180c:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001812:	4a4a      	ldr	r2, [pc, #296]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff fab0 	bl	8000d80 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff faac 	bl	8000d80 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e1d4      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x3ec>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800184c:	4a3b      	ldr	r2, [pc, #236]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fa93 	bl	8000d80 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff fa8f 	bl	8000d80 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1b7      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001870:	4b32      	ldr	r3, [pc, #200]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 80a6 	beq.w	80019d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10d      	bne.n	80018b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b27      	ldr	r3, [pc, #156]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	4a26      	ldr	r2, [pc, #152]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b8:	4b21      	ldr	r3, [pc, #132]	@ (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d118      	bne.n	80018f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <HAL_RCC_OscConfig+0x508>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fa56 	bl	8000d80 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff fa52 	bl	8000d80 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e17a      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <HAL_RCC_OscConfig+0x508>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x4d8>
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800190e:	e029      	b.n	8001964 <HAL_RCC_OscConfig+0x52c>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d115      	bne.n	8001944 <HAL_RCC_OscConfig+0x50c>
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191e:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a03      	ldr	r2, [pc, #12]	@ (800193c <HAL_RCC_OscConfig+0x504>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x52c>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	4b9c      	ldr	r3, [pc, #624]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194a:	4a9b      	ldr	r2, [pc, #620]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001954:	4b98      	ldr	r3, [pc, #608]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195a:	4a97      	ldr	r2, [pc, #604]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d016      	beq.n	800199a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff fa08 	bl	8000d80 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff fa04 	bl	8000d80 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e12a      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800198a:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ed      	beq.n	8001974 <HAL_RCC_OscConfig+0x53c>
 8001998:	e015      	b.n	80019c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199a:	f7ff f9f1 	bl	8000d80 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff f9ed 	bl	8000d80 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e113      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b8:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ed      	bne.n	80019a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c6:	7ffb      	ldrb	r3, [r7, #31]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019cc:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	4a79      	ldr	r2, [pc, #484]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80fe 	beq.w	8001bde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	f040 80d0 	bne.w	8001b8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ec:	4b72      	ldr	r3, [pc, #456]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d130      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d127      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d11f      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a2c:	2a07      	cmp	r2, #7
 8001a2e:	bf14      	ite	ne
 8001a30:	2201      	movne	r2, #1
 8001a32:	2200      	moveq	r2, #0
 8001a34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d113      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d109      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	085b      	lsrs	r3, r3, #1
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d06e      	beq.n	8001b40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b0c      	cmp	r3, #12
 8001a66:	d069      	beq.n	8001b3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a68:	4b53      	ldr	r3, [pc, #332]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0ad      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a84:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7ff f976 	bl	8000d80 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f972 	bl	8000d80 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e09a      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab6:	4b40      	ldr	r3, [pc, #256]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_RCC_OscConfig+0x784>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ad0:	0212      	lsls	r2, r2, #8
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ad8:	0852      	lsrs	r2, r2, #1
 8001ada:	3a01      	subs	r2, #1
 8001adc:	0552      	lsls	r2, r2, #21
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ae4:	0852      	lsrs	r2, r2, #1
 8001ae6:	3a01      	subs	r2, #1
 8001ae8:	0652      	lsls	r2, r2, #25
 8001aea:	4311      	orrs	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001af0:	0912      	lsrs	r2, r2, #4
 8001af2:	0452      	lsls	r2, r2, #17
 8001af4:	430a      	orrs	r2, r1
 8001af6:	4930      	ldr	r1, [pc, #192]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001afc:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b08:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b14:	f7ff f934 	bl	8000d80 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff f930 	bl	8000d80 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e058      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	4b22      	ldr	r3, [pc, #136]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b3a:	e050      	b.n	8001bde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e04f      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b40:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d148      	bne.n	8001bde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a16      	ldr	r2, [pc, #88]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b64:	f7ff f90c 	bl	8000d80 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f908 	bl	8000d80 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e030      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x734>
 8001b8a:	e028      	b.n	8001bde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d023      	beq.n	8001bda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f8ef 	bl	8000d80 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e00c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f8eb 	bl	8000d80 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d905      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e013      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	4905      	ldr	r1, [pc, #20]	@ (8001be8 <HAL_RCC_OscConfig+0x7b0>)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_RCC_OscConfig+0x7b4>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60cb      	str	r3, [r1, #12]
 8001bd8:	e001      	b.n	8001bde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	feeefffc 	.word	0xfeeefffc

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0e7      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b75      	ldr	r3, [pc, #468]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d910      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b72      	ldr	r3, [pc, #456]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4970      	ldr	r1, [pc, #448]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b6e      	ldr	r3, [pc, #440]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0cf      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d010      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d908      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4960      	ldr	r1, [pc, #384]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d04c      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c76:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d121      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0a6      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8e:	4b54      	ldr	r3, [pc, #336]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e09a      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e08e      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e086      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4943      	ldr	r1, [pc, #268]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f852 	bl	8000d80 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f7ff f84e 	bl	8000d80 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e06e      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d208      	bcs.n	8001d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	492b      	ldr	r1, [pc, #172]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d210      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 0207 	bic.w	r2, r3, #7
 8001d4c:	4923      	ldr	r1, [pc, #140]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b21      	ldr	r3, [pc, #132]	@ (8001ddc <HAL_RCC_ClockConfig+0x1ec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d001      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e036      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	4918      	ldr	r1, [pc, #96]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4910      	ldr	r1, [pc, #64]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da4:	f000 f824 	bl	8001df0 <HAL_RCC_GetSysClockFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	490b      	ldr	r1, [pc, #44]	@ (8001de4 <HAL_RCC_ClockConfig+0x1f4>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <HAL_RCC_ClockConfig+0x1fc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe ff89 	bl	8000ce0 <HAL_InitTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08002e20 	.word	0x08002e20
 8001de8:	20000008 	.word	0x20000008
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x34>
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d121      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d11e      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e24:	4b34      	ldr	r3, [pc, #208]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e30:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e005      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d102      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	e004      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e74:	4b23      	ldr	r3, [pc, #140]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d134      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d003      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0xac>
 8001e94:	e005      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	e005      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9e:	617b      	str	r3, [r7, #20]
      break;
 8001ea0:	e002      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	617b      	str	r3, [r7, #20]
      break;
 8001ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	fb03 f202 	mul.w	r2, r3, r2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	0e5b      	lsrs	r3, r3, #25
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08002e30 	.word	0x08002e30
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	007a1200 	.word	0x007a1200

08001f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff fa26 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8001f24:	6178      	str	r0, [r7, #20]
 8001f26:	e014      	b.n	8001f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f40:	f7ff fa16 	bl	8001370 <HAL_PWREx_GetVoltageRange>
 8001f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f58:	d10b      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	@ 0x80
 8001f5e:	d919      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f64:	d902      	bls.n	8001f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f66:	2302      	movs	r3, #2
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e013      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e010      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	@ 0x80
 8001f76:	d902      	bls.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f78:	2303      	movs	r3, #3
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e00a      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b80      	cmp	r3, #128	@ 0x80
 8001f82:	d102      	bne.n	8001f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f84:	2302      	movs	r3, #2
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	e004      	b.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b70      	cmp	r3, #112	@ 0x70
 8001f8e:	d101      	bne.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 0207 	bic.w	r2, r3, #7
 8001f9c:	4909      	ldr	r1, [pc, #36]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e095      	b.n	8002106 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fea:	d009      	beq.n	8002000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
 8001ff2:	e005      	b.n	8002000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fd62 	bl	8000ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002036:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002040:	d902      	bls.n	8002048 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e002      	b.n	800204e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002056:	d007      	beq.n	8002068 <HAL_SPI_Init+0xa0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002060:	d002      	beq.n	8002068 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	0c1b      	lsrs	r3, r3, #16
 80020c4:	f003 0204 	and.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b088      	sub	sp, #32
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800211e:	f7fe fe2f 	bl	8000d80 <HAL_GetTick>
 8002122:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d001      	beq.n	8002138 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002134:	2302      	movs	r3, #2
 8002136:	e15c      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <HAL_SPI_Transmit+0x36>
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e154      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_SPI_Transmit+0x48>
 8002152:	2302      	movs	r3, #2
 8002154:	e14d      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2203      	movs	r2, #3
 8002162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a8:	d10f      	bne.n	80021ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	d007      	beq.n	80021e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80021f0:	d952      	bls.n	8002298 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Transmit+0xf2>
 80021fa:	8b7b      	ldrh	r3, [r7, #26]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d145      	bne.n	800228c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	881a      	ldrh	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002210:	1c9a      	adds	r2, r3, #2
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002224:	e032      	b.n	800228c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d112      	bne.n	800225a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	881a      	ldrh	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	1c9a      	adds	r2, r3, #2
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002258:	e018      	b.n	800228c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225a:	f7fe fd91 	bl	8000d80 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d803      	bhi.n	8002272 <HAL_SPI_Transmit+0x164>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d102      	bne.n	8002278 <HAL_SPI_Transmit+0x16a>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0b2      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1c7      	bne.n	8002226 <HAL_SPI_Transmit+0x118>
 8002296:	e083      	b.n	80023a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Transmit+0x198>
 80022a0:	8b7b      	ldrh	r3, [r7, #26]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d177      	bne.n	8002396 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d912      	bls.n	80022d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b4:	881a      	ldrh	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	1c9a      	adds	r2, r3, #2
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b02      	subs	r3, #2
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022d4:	e05f      	b.n	8002396 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022fc:	e04b      	b.n	8002396 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d12b      	bne.n	8002364 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d912      	bls.n	800233c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b02      	subs	r3, #2
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800233a:	e02c      	b.n	8002396 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002362:	e018      	b.n	8002396 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002364:	f7fe fd0c 	bl	8000d80 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d803      	bhi.n	800237c <HAL_SPI_Transmit+0x26e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d102      	bne.n	8002382 <HAL_SPI_Transmit+0x274>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e02d      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ae      	bne.n	80022fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f947 	bl	8002638 <SPI_EndRxTxTransaction>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800240c:	f7fe fcb8 	bl	8000d80 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800241c:	f7fe fcb0 	bl	8000d80 <HAL_GetTick>
 8002420:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	015b      	lsls	r3, r3, #5
 8002428:	0d1b      	lsrs	r3, r3, #20
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002432:	e054      	b.n	80024de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243a:	d050      	beq.n	80024de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800243c:	f7fe fca0 	bl	8000d80 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	d902      	bls.n	8002452 <SPI_WaitFlagStateUntilTimeout+0x56>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d13d      	bne.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002460:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800246a:	d111      	bne.n	8002490 <SPI_WaitFlagStateUntilTimeout+0x94>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002474:	d004      	beq.n	8002480 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247e:	d107      	bne.n	8002490 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800248e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002498:	d10f      	bne.n	80024ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e017      	b.n	80024fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3b01      	subs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4013      	ands	r3, r2
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d19b      	bne.n	8002434 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008

0800250c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800251e:	f7fe fc2f 	bl	8000d80 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800252e:	f7fe fc27 	bl	8000d80 <HAL_GetTick>
 8002532:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800253c:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00da      	lsls	r2, r3, #3
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	0d1b      	lsrs	r3, r3, #20
 800254c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002554:	e060      	b.n	8002618 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800255c:	d107      	bne.n	800256e <SPI_WaitFifoStateUntilTimeout+0x62>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800256c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d050      	beq.n	8002618 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002576:	f7fe fc03 	bl	8000d80 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002582:	429a      	cmp	r2, r3
 8002584:	d902      	bls.n	800258c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	2b00      	cmp	r3, #0
 800258a:	d13d      	bne.n	8002608 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800259a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025a4:	d111      	bne.n	80025ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ae:	d004      	beq.n	80025ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b8:	d107      	bne.n	80025ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025d2:	d10f      	bne.n	80025f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e010      	b.n	800262a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3b01      	subs	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d196      	bne.n	8002556 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3728      	adds	r7, #40	@ 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000008 	.word	0x20000008

08002638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ff5b 	bl	800250c <SPI_WaitFifoStateUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e027      	b.n	80026bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2200      	movs	r2, #0
 8002674:	2180      	movs	r1, #128	@ 0x80
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fec0 	bl	80023fc <SPI_WaitFlagStateUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e014      	b.n	80026bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff ff34 	bl	800250c <SPI_WaitFifoStateUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e000      	b.n	80026bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e049      	b.n	800276a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fa3c 	bl	8000b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 f9d6 	bl	8002ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d001      	beq.n	800278c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e04f      	b.n	800282c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a23      	ldr	r2, [pc, #140]	@ (8002838 <HAL_TIM_Base_Start_IT+0xc4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01d      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b6:	d018      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_TIM_Base_Start_IT+0xc8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_TIM_Base_Start_IT+0xcc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00e      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002844 <HAL_TIM_Base_Start_IT+0xd0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_TIM_Base_Start_IT+0xd4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <HAL_TIM_Base_Start_IT+0x76>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	@ (800284c <HAL_TIM_Base_Start_IT+0xd8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d115      	bne.n	8002816 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b06      	cmp	r3, #6
 80027fa:	d015      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002802:	d011      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	e008      	b.n	8002828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	e000      	b.n	800282a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40000400 	.word	0x40000400
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	40013400 	.word	0x40013400
 800284c:	40014000 	.word	0x40014000
 8002850:	00010007 	.word	0x00010007

08002854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d020      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0202 	mvn.w	r2, #2
 8002888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8e9 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8db 	bl	8002a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f8ec 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0204 	mvn.w	r2, #4
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8c3 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8b5 	bl	8002a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8c6 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d020      	beq.n	8002950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01b      	beq.n	8002950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0208 	mvn.w	r2, #8
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2204      	movs	r2, #4
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f89d 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f88f 	bl	8002a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f8a0 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d020      	beq.n	800299c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01b      	beq.n	800299c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0210 	mvn.w	r2, #16
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2208      	movs	r2, #8
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f877 	bl	8002a76 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f869 	bl	8002a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f87a 	bl	8002a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0201 	mvn.w	r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fd88 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f913 	bl	8002c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f90b 	bl	8002c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f834 	bl	8002a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f06f 0220 	mvn.w	r2, #32
 8002a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8d3 	bl	8002c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a46      	ldr	r2, [pc, #280]	@ (8002be0 <TIM_Base_SetConfig+0x12c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad2:	d00f      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	@ (8002be4 <TIM_Base_SetConfig+0x130>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d00b      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a42      	ldr	r2, [pc, #264]	@ (8002be8 <TIM_Base_SetConfig+0x134>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a41      	ldr	r2, [pc, #260]	@ (8002bec <TIM_Base_SetConfig+0x138>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a40      	ldr	r2, [pc, #256]	@ (8002bf0 <TIM_Base_SetConfig+0x13c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d108      	bne.n	8002b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a35      	ldr	r2, [pc, #212]	@ (8002be0 <TIM_Base_SetConfig+0x12c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b14:	d01b      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a32      	ldr	r2, [pc, #200]	@ (8002be4 <TIM_Base_SetConfig+0x130>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d017      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a31      	ldr	r2, [pc, #196]	@ (8002be8 <TIM_Base_SetConfig+0x134>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <TIM_Base_SetConfig+0x138>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf0 <TIM_Base_SetConfig+0x13c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2e      	ldr	r2, [pc, #184]	@ (8002bf4 <TIM_Base_SetConfig+0x140>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <TIM_Base_SetConfig+0x144>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x9a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2c      	ldr	r2, [pc, #176]	@ (8002bfc <TIM_Base_SetConfig+0x148>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <TIM_Base_SetConfig+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00f      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a18      	ldr	r2, [pc, #96]	@ (8002bf0 <TIM_Base_SetConfig+0x13c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00b      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <TIM_Base_SetConfig+0x140>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	@ (8002bf8 <TIM_Base_SetConfig+0x144>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d003      	beq.n	8002bac <TIM_Base_SetConfig+0xf8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <TIM_Base_SetConfig+0x148>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40000c00 	.word	0x40000c00
 8002bf0:	40013400 	.word	0x40013400
 8002bf4:	40014000 	.word	0x40014000
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800

08002c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <memset>:
 8002c3c:	4402      	add	r2, r0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002c84 <__libc_init_array+0x38>)
 8002c50:	4c0d      	ldr	r4, [pc, #52]	@ (8002c88 <__libc_init_array+0x3c>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	2600      	movs	r6, #0
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002c8c <__libc_init_array+0x40>)
 8002c5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002c90 <__libc_init_array+0x44>)
 8002c60:	f000 f818 	bl	8002c94 <_init>
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	2600      	movs	r6, #0
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08002e60 	.word	0x08002e60
 8002c88:	08002e60 	.word	0x08002e60
 8002c8c:	08002e60 	.word	0x08002e60
 8002c90:	08002e64 	.word	0x08002e64

08002c94 <_init>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr

08002ca0 <_fini>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	bf00      	nop
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr
